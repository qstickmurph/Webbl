name: Webbl

services:
  # ASP.NET Webbl Api
  api:
    build:
      context: .
      dockerfile: ./tools/containerfiles/api.Containerfile
      target: development
      args:
        - SERVER_DIR=./server
        - HTTP_PORT=5000
        - HTTPS_PORT=5001
    container_name: webbl-api-dev
    restart: unless-stopped
    ports:
      - "${API_HTTP_PORT}:5000"
      - "${API_HTTPS_PORT}:5001"
    tty: true
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - DOTNET_USE_POLLING_FILE_WATCHER=true
      - ConnectionStrings__DefaultConnection=Host=postgres;Port=${DB_PORT};Database=${DB_NAME};Username=${DB_USERNAME};Password=${DB_PASSWORD}
      - TERM=xterm-256color
    volumes:
      - ./server:/app
      - /app/Api/bin
      - /app/Api/obj
      - /app/Data/bin
      - /app/Data/obj
      - /app/Game/bin
      - /app/Game/obj
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - web-api-network
      - api-db-network

  # Angular Webbl Frontend
  web:
    build:
      context: .
      dockerfile: ./tools/containerfiles/web.Containerfile
      target: development
      args:
        - WEB_DIR=./web
        - NGINX_CONF=./tools/config/nginx.conf
    container_name: webbl-web-dev
    restart: unless-stopped
    ports:
      - "8080:8080"
    tty: true
    environment:
      - API_URL=api
      - API_PORT=${HTTP_PORT:-5000}
      - TERM=xterm-256color
    volumes:
      - ./web/src/:/app/src
      - ./web/angular.json:/app/angular.json
      - ./web/tsconfig.json:/app/tsconfig.json
      - ./web/tsconfig.app.json:/app/tsconfig.app.json
      - /app/nodemodules
    depends_on:
      - api
    networks:
      - web-api-network

  # Webbl Database
  postgres:
    image: postgres:18-alpine
    container_name: webbl-postgres-dev
    restart: unless-stopped
    ports:
      - "5432:5432"
    environment:
      POSTGRES_DB: ${DB_NAME}
      POSTGRES_USER: ${DB_USERNAME}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
    volumes:
      - postgres-data:/var/lib/postgresql/18/docker
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U devuser"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - api-db-network

volumes:
  postgres-data:
    driver: local

networks:
  web-api-network:
    driver: bridge
  api-db-network:
    driver: bridge
